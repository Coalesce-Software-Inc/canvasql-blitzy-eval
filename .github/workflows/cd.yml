name: CD

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  workflow_run:
    workflows: [CI]
    branches: [main]
    types: [completed]

env:
  NODE_VERSION: 18.x
  PNPM_VERSION: 8.x
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  DEPLOYMENT_TIMEOUT: 300
  HEALTH_CHECK_RETRIES: 5
  ROLLBACK_ENABLED: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

  security-scan:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.10.0
        with:
          scan-type: 'fs,config'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v3
        with:
          context: ./src/web
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/erd-tool/frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/erd-tool/frontend:latest
          cache-to: type=inline
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v3
        with:
          context: ./src/backend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/erd-tool/backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/erd-tool/backend:latest
          cache-to: type=inline
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to staging
        run: |
          chmod +x ./infrastructure/scripts/deploy.sh
          ENVIRONMENT=staging \
          IMAGE_TAG=${{ github.sha }} \
          ./infrastructure/scripts/deploy.sh
        env:
          DEPLOYMENT_TYPE: docker-compose

      - name: Monitor deployment health
        run: |
          attempt=1
          while [ $attempt -le ${{ env.HEALTH_CHECK_RETRIES }} ]; do
            if curl -f https://staging.erd-tool.com/health; then
              echo "Deployment healthy"
              exit 0
            fi
            echo "Attempt $attempt of ${{ env.HEALTH_CHECK_RETRIES }}"
            sleep 30
            attempt=$((attempt + 1))
          done
          echo "Deployment health check failed"
          exit 1

      - name: Push deployment metrics
        uses: datadog/action-dd-push@v1
        with:
          api-key: ${{ env.DATADOG_API_KEY }}
          metrics: |
            deployment.staging.success:1|c|#env:staging,sha:${{ github.sha }}

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://erd-tool.com
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to production
        run: |
          chmod +x ./infrastructure/scripts/deploy.sh
          ENVIRONMENT=production \
          IMAGE_TAG=${{ github.sha }} \
          ./infrastructure/scripts/deploy.sh
        env:
          DEPLOYMENT_TYPE: docker-compose

      - name: Verify deployment
        run: |
          attempt=1
          while [ $attempt -le ${{ env.HEALTH_CHECK_RETRIES }} ]; do
            if curl -f https://erd-tool.com/health; then
              echo "Production deployment healthy"
              exit 0
            fi
            echo "Attempt $attempt of ${{ env.HEALTH_CHECK_RETRIES }}"
            sleep 30
            attempt=$((attempt + 1))
          done
          if [ "${{ env.ROLLBACK_ENABLED }}" = "true" ]; then
            echo "Initiating rollback..."
            ENVIRONMENT=production ./infrastructure/scripts/deploy.sh rollback
          fi
          exit 1

      - name: Push deployment metrics
        uses: datadog/action-dd-push@v1
        with:
          api-key: ${{ env.DATADOG_API_KEY }}
          metrics: |
            deployment.production.success:1|c|#env:production,sha:${{ github.sha }}

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "Production deployment successful"
          elif [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "Staging deployment successful"
          else
            echo "Deployment failed"
            exit 1
          fi