version: '3.8'

services:
  # Frontend service with Nginx
  frontend:
    build:
      context: ../../src/web
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=staging
      - VITE_API_URL=http://backend:3000
      - VITE_WS_URL=ws://websocket:3001
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl.conf:/etc/nginx/ssl.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - websocket
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  # Backend API service
  backend:
    build:
      context: ../../src/backend
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=staging
      - PORT=3000
      - WS_PORT=3001
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=file:/app/data/sqlite.db
      - DATABASE_POOL_SIZE=10
    expose:
      - 3000
    volumes:
      - sqlite-data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1GB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # WebSocket server for real-time collaboration
  websocket:
    build:
      context: ../../src/backend
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=staging
      - WS_PORT=3001
      - REDIS_URL=redis://redis:6379
    expose:
      - 3001
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1GB
    networks:
      - app-network

  # Redis for session management and real-time state
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 1GB
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  sqlite-data:
    driver: local
  redis-data:
    driver: local